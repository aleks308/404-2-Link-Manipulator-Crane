#include <SPI.h>
#include "printf.h"
#include "RF24.h"

#define CE_PIN 9
#define CSN_PIN 10

// instantiate an object for the nRF24L01 transceiver
RF24 radio(CE_PIN, CSN_PIN);  
// Let these addresses be used for the pair
uint8_t address[][6] = { "1Node", "2Node" };
bool radioNumber = 0;
bool role = true;  // true = TX role, false = RX role
uint8_t payload[6] = {255,11,23,240,55,238};
uint8_t HBpayload[7];
int cnt = 0;  // <<<<<<<<<  added the semi colon
int integerValue=0; 
int storedData[2];    //<<<< the value to be stored is an int but only space for 2 of them as written
// Max value is 65535
char incomingByte;
void setup() {
  Serial.begin(115200);
  if (!radio.begin()) {
    Serial.println(F("radio hardware is not responding!!"));
    while (1) {}  // hold in infinite loop
  }
  radio.setPALevel(RF24_PA_LOW);  // RF24_PA_MAX is default.
  
  // set the TX address of the RX node into the TX pipe
  radio.openWritingPipe(address[radioNumber]);  // always uses pipe 0

  radio.setPayloadSize(sizeof(HBpayload));

  // set the RX address of the TX node into a RX pipe
  radio.openReadingPipe(1, address[!radioNumber]);  // using pipe 1
  radio.startListening();
} 

void loop() {
  role=0;
  uint8_t pipe;
  if (radio.available(&pipe))
  {
     uint8_t bytes = radio.getPayloadSize();
     radio.read(&HBpayload, bytes);
//     for(int i=0; i<sizeof(HBpayload); i++){
//       Serial.println(HBpayload[i]);
//     }
     int chkSUM=0;
     for(int i=0; i<sizeof(HBpayload); i++){
       if (i!=5){
        chkSUM=chkSUM+int(HBpayload[i]);
       }
     }
     chkSUM=chkSUM % 256;
     if(HBpayload[5]==chkSUM){
       parseHB();
     }
     else{
      Serial.print("Bad checksum");
     }
  }
  if (Serial.available() > 0) {   // something came across serial
    integerValue = 0;         // throw away previous integerValue
    while(1) {            // force into a loop until 'n' is received
      incomingByte = Serial.read();
      if (incomingByte == '\n' || incomingByte == ',') //<<<<<<<<< break on Newline or comma
      {
        break;     
      }           // exit the while(1), we're done receiving
      if (incomingByte == -1) continue;  // if no characters are in the buffer read() returns -1
      integerValue *= 10;  // shift left 1 decimal place
      // convert ASCII to integer, add, and shift left 1 decimal place
      integerValue = ((incomingByte - 48) + integerValue);
    }
    storedData[cnt] = integerValue;
    payload[cnt+1]=storedData[cnt];
    cnt++;      //<<<<<<<<<<<<<<<increment index after storing and printing
    if(cnt==3){
      cnt=0;
      int chkSUM=0;
      for(int i=0; i<sizeof(payload); i++){
        if (i!=4){
         chkSUM=chkSUM+int(payload[i]);
        }
      }
      payload[4]=chkSUM % 256;
      role=1;
      for(int i=0; i<sizeof(payload); i++){
       Serial.println(payload[i]);
     }
    }
  }
  if (role){
     radio.stopListening();
     radio.setPayloadSize(sizeof(payload));
     bool report=radio.write(&payload, sizeof(payload));
     if (report) {
     }
     else {
     }
     radio.setPayloadSize(sizeof(HBpayload));
     radio.startListening();
  }
}

void parseHB(){
  if (HBpayload[0]==255 && HBpayload[6]==238){
    int voltage1=HBpayload[3];
    int voltage2=HBpayload[4];
    int weight1=HBpayload[1];
    int weight2=HBpayload[2];
    Serial.print("Heartbeat receieved. The battery voltage is: ");
    Serial.print(voltage1);
    Serial.print(".");
    Serial.print(voltage2);
    Serial.println("V");
    Serial.print("The weight of the object is: ");
    Serial.print(weight1);
    Serial.print(".");
    Serial.print(weight2);
    Serial.println(" lbs");
  }
}
